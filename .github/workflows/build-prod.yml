name: BuildProd

on:
  push:
    tags:
      - "v*"

concurrency:
  cancel-in-progress: true
  group: ${{ github.ref }}

jobs:
  BuildServer:
    strategy:
      # Don't fast-fail on tag and master
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Building server image
    runs-on: ubuntu-latest

    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops to register image
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/server
          dockerfile: ./src/server/Dockerfile
          dockercontext: ./src

  BuildFront:
    strategy:
      # Don't fast-fail on tag and master
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Building front image
    runs-on: ubuntu-latest
    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops to register image
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/client
          dockerfile: ./src/client/Dockerfile
          dockercontext: ./src/client

  BuildGraphIql:
    strategy:
      # Don't fast-fail on tag and master
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Building GraphIQL image
    runs-on: ubuntu-latest
    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops to register image
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/graphiql
          dockerfile: ./src/graphiql/Dockerfile
          dockercontext: ./src/graphiql

  BuildStrapi:
    strategy:
      # Don't fast-fail on tag and master
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Building strapi image
    runs-on: ubuntu-latest

    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - name: Use autodevops to register image
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/strapi
          dockerfile: ./src/strapi/Dockerfile
          dockercontext: ./src/strapi

  BuildN8N:
    strategy:
      # Don't fast-fail on tag and master
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Building N8N image
    runs-on: ubuntu-latest

    steps:
      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Use autodevops to register image
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: ${{ env.project }}/n8n
          dockerfile: ./src/n8n/Dockerfile
          dockercontext: ./src/n8n

  Manifests:
    name: Generate k8s manifests for server
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: SocialGouv/actions/autodevops-manifests@v1
        with:
          environment: prod
          rancherId: ${{ secrets.RANCHER_PROJECT_ID }}
          socialgouvBaseDomain: ${{ secrets.SOCIALGOUV_BASE_DOMAIN }}

  deploy:
    name: Deploy application
    runs-on: ubuntu-latest
    needs: [ BuildServer, BuildFront, BuildStrapi, BuildN8N, BuildGraphIql,Manifests ]
    environment: production
    steps:
      - uses: SocialGouv/actions/autodevops-deploy@v1
        with:
          environment: prod
          token: ${{ secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          rancherId: ${{ secrets.RANCHER_PROJECT_ID }}
